{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst URL = 'https://api.spacexdata.com/v3/missions';\nexport const fetchMission = createAsyncThunk('mission/fetchMission', async () => {\n  const response = await axios.get(URL);\n  return response.data;\n});\nconst missionSlice = createSlice({\n  name: 'missions',\n  initialState: {\n    data: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    joinMission: (state, action) => ({\n      ...state,\n      data: state.data.map(mission => {\n        if (mission.mission_id !== action.payload) return mission;\n        return {\n          ...mission,\n          joined: true\n        };\n      })\n    }),\n    leavMission: (state, action) => ({\n      ...state,\n      data: state.data.map(mission => {\n        if (mission.mission_id !== action.payload) return mission;\n        return {\n          ...mission,\n          joined: false\n        };\n      })\n    }),\n    joindedMissions: state => ({\n      ...state,\n      data: state.data.filter(mission => mission.joined)\n    })\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchMission.pending, state => {\n      state.status = 'loadding...';\n    }).addCase(fetchMission.fulfilled, (state, action) => {\n      state.status = 'suceeded';\n      state.data = action.payload.map(mission => ({\n        mission_id: mission.mission_id,\n        mission_name: mission.mission_name,\n        description: mission.description,\n        joined: false\n      }));\n    }).addCase(fetchMission.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport const {\n  joinMission,\n  leavMission,\n  joindedMissions\n} = missionSlice.actions;\nexport default missionSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","URL","fetchMission","response","get","data","missionSlice","name","initialState","status","error","reducers","joinMission","state","action","map","mission","mission_id","payload","joined","leavMission","joindedMissions","filter","extraReducers","builder","addCase","pending","fulfilled","mission_name","description","rejected","message","actions","reducer"],"sources":["/home/joy/Desktop/microverse/capstone/Rest-Countries/src/redux/missions/missionSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nconst URL = 'https://api.spacexdata.com/v3/missions';\n\nexport const fetchMission = createAsyncThunk(\n  'mission/fetchMission',\n  async () => {\n    const response = await axios.get(URL);\n    return response.data;\n  },\n);\n\nconst missionSlice = createSlice({\n  name: 'missions',\n  initialState: {\n    data: [],\n    status: 'idle',\n    error: null,\n  },\n  reducers: {\n    joinMission: (state, action) => ({\n      ...state,\n      data: state.data.map((mission) => {\n        if (mission.mission_id !== action.payload) return mission;\n        return { ...mission, joined: true };\n      }),\n    }),\n    leavMission: (state, action) => ({\n      ...state,\n      data: state.data.map((mission) => {\n        if (mission.mission_id !== action.payload) return mission;\n        return { ...mission, joined: false };\n      }),\n    }),\n    joindedMissions: (state) => ({\n      ...state,\n      data: state.data.filter((mission) => mission.joined),\n    }),\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchMission.pending, (state) => {\n        state.status = 'loadding...';\n      })\n      .addCase(fetchMission.fulfilled, (state, action) => {\n        state.status = 'suceeded';\n        state.data = action.payload.map((mission) => ({\n          mission_id: mission.mission_id,\n          mission_name: mission.mission_name,\n          description: mission.description,\n          joined: false,\n        }));\n      })\n      .addCase(fetchMission.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport const { joinMission, leavMission, joindedMissions } = missionSlice.actions;\nexport default missionSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAG,wCAAwC;AAEpD,OAAO,MAAMC,YAAY,GAAGH,gBAAgB,CAC1C,sBAAsB,EACtB,YAAY;EACV,MAAMI,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAACH,GAAG,CAAC;EACrC,OAAOE,QAAQ,CAACE,IAAI;AACtB,CACF,CAAC;AAED,MAAMC,YAAY,GAAGR,WAAW,CAAC;EAC/BS,IAAI,EAAE,UAAU;EAChBC,YAAY,EAAE;IACZH,IAAI,EAAE,EAAE;IACRI,MAAM,EAAE,MAAM;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACRC,WAAW,EAAEA,CAACC,KAAK,EAAEC,MAAM,MAAM;MAC/B,GAAGD,KAAK;MACRR,IAAI,EAAEQ,KAAK,CAACR,IAAI,CAACU,GAAG,CAAEC,OAAO,IAAK;QAChC,IAAIA,OAAO,CAACC,UAAU,KAAKH,MAAM,CAACI,OAAO,EAAE,OAAOF,OAAO;QACzD,OAAO;UAAE,GAAGA,OAAO;UAAEG,MAAM,EAAE;QAAK,CAAC;MACrC,CAAC;IACH,CAAC,CAAC;IACFC,WAAW,EAAEA,CAACP,KAAK,EAAEC,MAAM,MAAM;MAC/B,GAAGD,KAAK;MACRR,IAAI,EAAEQ,KAAK,CAACR,IAAI,CAACU,GAAG,CAAEC,OAAO,IAAK;QAChC,IAAIA,OAAO,CAACC,UAAU,KAAKH,MAAM,CAACI,OAAO,EAAE,OAAOF,OAAO;QACzD,OAAO;UAAE,GAAGA,OAAO;UAAEG,MAAM,EAAE;QAAM,CAAC;MACtC,CAAC;IACH,CAAC,CAAC;IACFE,eAAe,EAAGR,KAAK,KAAM;MAC3B,GAAGA,KAAK;MACRR,IAAI,EAAEQ,KAAK,CAACR,IAAI,CAACiB,MAAM,CAAEN,OAAO,IAAKA,OAAO,CAACG,MAAM;IACrD,CAAC;EACH,CAAC;EACDI,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACvB,YAAY,CAACwB,OAAO,EAAGb,KAAK,IAAK;MACxCA,KAAK,CAACJ,MAAM,GAAG,aAAa;IAC9B,CAAC,CAAC,CACDgB,OAAO,CAACvB,YAAY,CAACyB,SAAS,EAAE,CAACd,KAAK,EAAEC,MAAM,KAAK;MAClDD,KAAK,CAACJ,MAAM,GAAG,UAAU;MACzBI,KAAK,CAACR,IAAI,GAAGS,MAAM,CAACI,OAAO,CAACH,GAAG,CAAEC,OAAO,KAAM;QAC5CC,UAAU,EAAED,OAAO,CAACC,UAAU;QAC9BW,YAAY,EAAEZ,OAAO,CAACY,YAAY;QAClCC,WAAW,EAAEb,OAAO,CAACa,WAAW;QAChCV,MAAM,EAAE;MACV,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CACDM,OAAO,CAACvB,YAAY,CAAC4B,QAAQ,EAAE,CAACjB,KAAK,EAAEC,MAAM,KAAK;MACjDD,KAAK,CAACJ,MAAM,GAAG,QAAQ;MACvBI,KAAK,CAACH,KAAK,GAAGI,MAAM,CAACJ,KAAK,CAACqB,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEnB,WAAW;EAAEQ,WAAW;EAAEC;AAAgB,CAAC,GAAGf,YAAY,CAAC0B,OAAO;AACjF,eAAe1B,YAAY,CAAC2B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}